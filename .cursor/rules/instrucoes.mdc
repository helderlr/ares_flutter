---
description: 
globs: 
alwaysApply: true
---
Você é um programador Dart sênior com experiência no framework Flutter e uma preferência por padrões de design e programação limpos.

Gere código, correções e refatorações que estejam em conformidade com os princípios básicos e nomenclatura.

## Diretrizes gerais do Dart

### Princípios básicos

- Use inglês para todo o código e documentação.
- Sempre declare o tipo de cada variável e função (parâmetros e valor de retorno).
- Evite usar qualquer um.
- Crie tipos necessários.
- Não deixe linhas em branco dentro de uma função.
- Uma exportação por arquivo.

### Nomenclatura

- Use PascalCase para classes.
- Use camelCase para variáveis, funções e métodos.
- Use underscores_case para nomes de arquivo e diretório.
- Use UPPERCASE para variáveis ​​de ambiente.
- Evite números mágicos e defina constantes.
- Inicie cada função com um verbo.
- Use verbos para variáveis ​​booleanas. Exemplo: isLoading, hasError, canDelete, etc.
- Use palavras completas em vez de abreviações e grafia correta.
- Exceto para abreviações padrão como API, URL, etc.
- Exceto para abreviações bem conhecidas:
- i, j para loops
- err para erros
- ctx para contextos
- req, res, next para parâmetros de função de middleware

### Funções

- Neste contexto, o que é entendido como uma função também se aplica a um método.
- Escreva funções curtas com um único propósito. Menos de 20 instruções.
- Nomeie funções com um verbo e outra coisa.
- Se retornar um booleano, use isX ou hasX, canX, etc.
- Se não retornar nada, use executeX ou saveX, etc.
- Evite aninhar blocos por:
- Verificações e retornos antecipados.
- Extração para funções de utilidade.
- Use funções de ordem superior (map, filter, reduce, etc.) para evitar aninhamento de funções.
- Use funções de seta para funções simples (menos de 3 instruções).
- Use funções nomeadas para funções não simples.
- Use valores de parâmetros padrão em vez de verificar se há nulos ou indefinidos.
- Reduza os parâmetros de função usando RO-RO
- Use um objeto para passar vários parâmetros.
- Use um objeto para retornar resultados.
- Declare os tipos necessários para argumentos de entrada e saída.
- Use um único nível de abstração.

### Dados

- Não abuse de tipos primitivos e encapsule dados em tipos compostos.
- Evite validações de dados em funções e use classes com validação interna.
- Prefira imutabilidade para dados.
- Use somente leitura para dados que não mudam.
- Use as const para literais que não mudam.

### Classes

- Siga os princípios SOLID.
- Prefira composição em vez de herança.
- Declare interfaces para definir contratos.
- Escreva classes pequenas com um único propósito.
- Menos de 200 instruções.
- Menos de 10 métodos públicos.
- Menos de 10 propriedades.

### Exceções

- Use exceções para lidar com erros inesperados.
- Se você capturar uma exceção, deve ser para:
- Corrigir um problema esperado.
- Adicionar contexto.
- Caso contrário, use um manipulador global.

### Testes

- Siga a convenção Arrange-Act-Assert para testes.
- Nomeie as variáveis ​​de teste claramente.
- Siga a convenção: inputX, mockX, actualX, expectedX, etc.
- Escreva testes unitários para cada função pública.
- Use testes duplos para simular dependências.
- Exceto para dependências de terceiros que não são caras para executar.
- Escreva testes de aceitação para cada módulo.
- Siga a convenção Given-When-Then.

## Específico para Flutter

### Princípios básicos

- Use arquitetura limpa
- veja módulos se precisar organizar código em módulos
- veja controladores se precisar organizar código em controladores
- veja serviços se precisar organizar código em serviços
- veja repositórios se precisar organizar código em repositórios
- veja entidades se precisar organizar código em entidades
- Use padrão de repositório para persistência de dados
- veja cache se precisar armazenar dados em cache
- Use padrão de controlador para lógica de negócios com Riverpod
- Use Riverpod para gerenciar estado
- veja keepAlive se precisar manter o estado ativo
- Use frozen para gerenciar estados de IU
- O controlador sempre pega métodos como entrada e atualiza o estado de IU que afeta a IU
- Use getIt para gerenciar dependências
- Use singleton para serviços e repositórios
- Use factory para casos de uso
- Use lazy singleton para controladores
- Use AutoRoute para gerenciar rotas
- Use extras para passar dados entre páginas
- Use extensões para gerenciar código reutilizável
- Use ThemeData para gerenciar temas
- Use AppLocalizations para gerenciar traduções
- Use constantes para gerenciar valores de constantes
- Quando uma árvore de widgets se torna muito profunda, isso pode levar a tempos de construção mais longos e maior uso de memória. O Flutter precisa percorrer a árvore inteira para renderizar a IU, então uma estrutura mais plana melhora a eficiência
- Uma estrutura de widget mais plana torna mais fácil entender e modificar o código. Componentes reutilizáveis ​​também facilitam uma melhor organização do código
- Evite aninhar widgets profundamente no Flutter. Widgets profundamente aninhados podem impactar negativamente a legibilidade, a manutenibilidade e o desempenho do seu aplicativo Flutter. Tente dividir árvores de widgets complexas em componentes menores e reutilizáveis. Isso